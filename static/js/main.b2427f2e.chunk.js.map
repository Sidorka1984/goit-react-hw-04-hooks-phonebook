{"version":3,"sources":["component/Container/Container.styles.jsx","component/Container/Container.jsx","component/Form/Form.styles.jsx","component/Form/formHoock.jsx","component/Filter/Filter.styles.jsx","component/Filter/Filter.jsx","component/ContactsList/ContactsList.styles.jsx","component/ContactsList/ContactsList.jsx","component/App.js","index.js"],"names":["Containers","styled","div","Title","h1","Container","title","children","propType","PropType","string","isRequired","node","TitleSecond","h2","Input","input","Button","button","Form","onSubmit","useState","name","setName","number","setNumber","nameInputId","uuidv4","numberInputId","heandleChange","e","target","value","reset","preventDefault","htmlFor","type","placeholder","pattern","onChange","id","required","disabled","Text","p","Filter","Contact","ul","ContactItem","li","BtnDelete","ContactsList","contacts","onDeleteContact","map","onClick","App","setContacts","filter","setFilter","firstRender","useRef","useEffect","JSON","parse","localStorage","getItem","ContactsJson","current","parsedContacts","setItem","stringify","contact","some","alert","currentTarget","length","normalizedFilter","toLowerCase","includes","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2427f2e.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\nexport const Containers = styled.div`\r\n  max-width: 500px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding: 20px 50px;\r\n  background-color: #d2ffff;\r\n  box-shadow: 1px 1px 3px rgba(0,0,0,0.5);\r\n  border-radius: 5px;\r\n  &:hover{\r\n      box-shadow: 0px 0px 5px  rgba(0,0,0,0.5);\r\n  }\r\n`\r\nexport const Title = styled.h1`\r\n    text-align: center;\r\n   \r\n    color: #000;\r\n    font-weight: bold;\r\n    font-size: 42px;\r\n`","import PropType from 'prop-types';\r\nimport { Containers, Title } from './Container.styles';\r\nimport { FaBookOpen } from 'react-icons/fa';\r\n\r\nconst Container = ({ title, children }) => (\r\n    <Containers>\r\n        <Title><FaBookOpen /> {title}</Title>\r\n        {children}\r\n    </Containers>\r\n);\r\nContainer.propType = {\r\n    title: PropType.string.isRequired,\r\n    children: PropType.node,\r\n};\r\nexport default Container;\r\n","import styled from \"@emotion/styled\";\r\n\r\n\r\nexport const TitleSecond = styled.h2`\r\nfont-size: 17px;\r\nfont-weight: 500;\r\nmargin: 0;\r\njustify-content:center;\r\npadding-bottom: 10px;\r\n`\r\nexport const Input = styled.input`\r\nmax-width:350px;\r\ndisplay: flex;\r\npadding:5px;\r\nmargin-bottom: 20px;\r\ncursor: pointer;\r\nborder:  solid 2px #c8e7f9;\r\nbox-shadow: 1px 1px 3px rgba(0,0,0,0.5);\r\nborder-radius:5px;\r\n&:hover{\r\n    border:  solid 2px #79e000;\r\n    box-shadow: 0 0 20px rgba(121, 224, 0, 0.5);\r\n}`\r\n\r\nexport const Button = styled.button`\r\npadding: 5px;\r\nborder:  solid 2px #6b6a6a4c;\r\nborder-radius:5px;\r\n&:hover{\r\n    color: #09c3e4;\r\n    border: solid 2px #79e000;\r\n    box-shadow: 0 0 20px rgba(121, 224, 0, 0.5); \r\n}\r\n`","import { useState } from 'react';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { Input, TitleSecond, Button } from './Form.styles';\r\nimport { FiUser, FiPhoneCall } from 'react-icons/fi';\r\nimport { AiOutlineUserAdd } from 'react-icons/ai';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Form({ onSubmit }) {\r\n    const [name, setName] = useState('')\r\n    const [number, setNumber] = useState('')\r\n\r\n    const nameInputId = uuidv4();\r\n    const numberInputId = uuidv4();\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        onSubmit(name, number);\r\n        reset();\r\n    };\r\n    const heandleChange = (e) => {\r\n        const { name, value } = e.target\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value)\r\n                break\r\n            case 'number':\r\n                setNumber(value)\r\n                break\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        setName('')\r\n        setNumber('')\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <TitleSecond htmlFor={nameInputId}><FiUser /> Name</TitleSecond>\r\n            <Input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Enter name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                value={name}\r\n                onChange={heandleChange}\r\n                id={nameInputId}\r\n                required\r\n            />\r\n            <TitleSecond htmlFor={numberInputId}><FiPhoneCall /> Number</TitleSecond>\r\n            <Input\r\n                type=\"tel\"\r\n                name='number'\r\n                placeholder='Enter number'\r\n                onChange={heandleChange}\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                value={number}\r\n                id={numberInputId}\r\n                required\r\n            />\r\n            <Button\r\n                type=\"submit\"\r\n                disabled={!name || !number}><AiOutlineUserAdd /> Add contact</Button>\r\n        </form>\r\n\r\n    )\r\n\r\n}\r\nForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n}","import styled from \"@emotion/styled\";\r\n\r\nexport const Text = styled.p`\r\nfont-size:20px;\r\n`","import PropTypes from 'prop-types';\r\nimport { Input } from '../Form/Form.styles';\r\nimport { Text } from './Filter.styles';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n    return (\r\n        <>\r\n            <Text>Find contacts by name</Text>\r\n            <Input\r\n                type='text'\r\n                name='name'\r\n                placeholder=\"Name to search\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                value={value}\r\n                onChange={onChange}\r\n                required>\r\n                \r\n            </Input>\r\n        </>\r\n    )\r\n}\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import styled from '@emotion/styled'\r\n\r\nexport const Contact = styled.ul`\r\nwidth: 350px;\r\npadding: 0;\r\n`\r\n\r\nexport const ContactItem = styled.li`\r\ndisplay: flex;\r\ntext-align:center;\r\nalign-items:center;\r\njustify-content: space-around;\r\n`\r\n\r\nexport const BtnDelete = styled.button`\r\nbackground-color: #c8e7f9;\r\nmin-width: 40px;\r\nheight: 40px;\r\nborder: solid 2px #c8e7f9;\r\nbox-shadow: 1px 1px 3px rgba(0,0,0,0.5);\r\nborder-radius: 10%;\r\npadding: 3px;\r\n&:hover{\r\n    color: #79e000;\r\n    border:  solid 2px #79e000;\r\n    box-shadow: 1px 2px 2px 0 rgba(121, 224, 0, 0.5);\r\n}\r\n`\r\n\r\nexport const Text = styled.p`\r\nfont-size: 17px;\r\nfont-weight:400;\r\n`","import PropTypes from 'prop-types';\r\nimport { Contact, ContactItem, BtnDelete, Text } from './ContactsList.styles';\r\nimport { AiOutlineDelete, AiOutlineUser } from 'react-icons/ai';\r\n\r\nconst ContactsList = ({ contacts, onDeleteContact }) => {\r\n    return (\r\n        <Contact>\r\n            {contacts.map(({ id, name, number }) => (\r\n                <ContactItem key={id}><AiOutlineUser /><Text>{name}:{number}</Text>\r\n                    <BtnDelete onClick={() => onDeleteContact(id)}><AiOutlineDelete /></BtnDelete>\r\n                </ContactItem>\r\n            ))}\r\n        </Contact>\r\n    )\r\n}\r\nContactsList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n};\r\nexport default ContactsList;","import { useState, useEffect, useRef } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Container from \"./Container\";\nimport Form from \"./Form\";\nimport Filter from \"./Filter/Filter.jsx\";\nimport ContactsList from \"./ContactsList/ContactsList.jsx\";\nimport { GrContactInfo } from \"react-icons/gr\";\nimport ContactsJson from \"../Data/contacts.json\";\n\nexport default function App() {\n  const [contacts, setContacts] = useState([]);\n\n  const [filter, setFilter] = useState(\"\");\n  const firstRender = useRef(true);\n\n  useEffect(() => {\n    setContacts(JSON.parse(localStorage.getItem(\"contacts\")) ?? ContactsJson);\n  }, [])\n\n  useEffect(() => {\n    if (firstRender.current) {\n      const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n\n      if (parsedContacts) {\n        setContacts(parsedContacts);\n      }\n      firstRender.current = false;\n      return;\n    }\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const formSubmitHandle = (name, number) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    if (contacts.some((contact) => contact.name === name)) {\n      alert(`${name} is already in the contacts.`);\n      return;\n    }\n    setContacts((contacts) => [contact, ...contacts]);\n  };\n  const changeFilter = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n  const deleteContact = (contactId) => {\n    setContacts(contacts.filter((contact) => contact.id !== contactId));\n  };\n  return (\n    <Container title=\"Phonebook\">\n      <Form onSubmit={formSubmitHandle} />\n      <h2>\n        <GrContactInfo /> Contacts\n      </h2>\n      <Filter value={filter} onChange={changeFilter} />\n      {contacts.length > 0 && (\n        <ContactsList\n          contacts={getVisibleContacts()}\n          onDeleteContact={deleteContact}\n        />\n      )}\n    </Container>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./component/App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}